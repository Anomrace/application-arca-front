import { defineStore } from 'pinia'
import { ref } from 'vue'
import api from 'boot/axios' // ou le chemin vers votre instance Axios

export const useElevesStore = defineStore('eleves', () => {
  const eleves = ref([])

  // üîπ R√©cup√©rer tous les √©l√®ves
  async function fetchEleves() {
    try {
      const { data } = await api.get('/eleves')
      eleves.value = data
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration √©l√®ves :', error)
    }
  }

  // üîπ Ajouter un √©l√®ve (avec user nested create)
  async function addEleve(eleveData) {
    try {
      const { data } = await api.post('/eleves', eleveData)
      // On peut pousser directement l'√©l√®ve cr√©√©
      eleves.value.push(data)
    } catch (error) {
      console.error('‚ùå Erreur ajout √©l√®ve :', error)
    }
  }

  // üîπ Modifier un √©l√®ve
  async function updateEleve(eleveId, updates) {
    try {
      const { data } = await api.put(`/eleves/${eleveId}`, updates)
      const index = eleves.value.findIndex((e) => e.id === eleveId)
      if (index !== -1) {
        eleves.value[index] = data
      }
    } catch (error) {
      console.error('‚ùå Erreur modification √©l√®ve :', error)
    }
  }

  // üîπ Supprimer un √©l√®ve
  async function deleteEleve(eleveId) {
    try {
      await api.delete(`/eleves/${eleveId}`)
      // Retirer l'√©l√®ve du tableau local
      eleves.value = eleves.value.filter((e) => e.id !== eleveId)
    } catch (error) {
      console.error('‚ùå Erreur suppression √©l√®ve :', error)
    }
  }

  return {
    eleves,
    fetchEleves,
    addEleve,
    updateEleve,
    deleteEleve,
  }
})
